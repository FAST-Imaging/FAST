// Hack for windows and swig
%begin %{
#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
#include <crtdefs.h>
#endif
%}

%define MODULEIMPORT
"
print('Loading pyFAST ...')
import $module
print('Done')
"
%enddef


%module(moduleimport=MODULEIMPORT) fast
%{


#include <FAST/ProcessObject.hpp>
#include <FAST/Reporter.hpp>
#include <FAST/Visualization/SimpleWindow.hpp>
#include <FAST/Visualization/View.hpp>
#include <FAST/Visualization/Renderer.hpp>
#include <FAST/Data/DataTypes.hpp>
@PYFAST_HEADER_INCLUDES@

using namespace fast;

%}

// Third party stuff
%include <std_string.i>
%include <std_shared_ptr.i>
%include <std_vector.i>
%include <FAST/Python/std_unique_ptr.i>

// Enable eigen <-> numpy data conversion
%include <FAST/Python/eigen.i>
%eigen_typemaps(Vector2f)
%eigen_typemaps(Vector3f)
%eigen_typemaps(Vector2i)
%eigen_typemaps(Vector3i)
%eigen_typemaps(Vector2ui)
%eigen_typemaps(Vector3ui)
%eigen_typemaps(VectorXf)
%eigen_typemaps(VectorXi)
%eigen_typemaps(VectorXui)
%eigen_typemaps(Matrix3f)
%eigen_typemaps(Matrix4f)

// Enable std::vector <-> python conversion
%template(vectori) std::vector<int>;
%template(vectorf) std::vector<float>;
%template(vectorui) std::vector<uint>;
%template(vectorc) std::vector<char>;

// FAST CORE LIBRARY

// Define FAST_EXPORT to nothing to avoid compile errors
%define FAST_EXPORT
%enddef
%define Q_OBJECT
%enddef
%define Q_SLOTS
%enddef
%define Q_SIGNALS
public
%enddef

// Ignore statements
%ignore getDevice;
%ignore ReporterEnd::~ReporterEnd();
%ignore QObject;
%ignore Worker;
%ignore CameraWorker;
%ignore ImagePyramidLevel;
%ignore ImagePyramidPatch;
%ignore fast::ImagePyramidAccess::getPatchData;
%ignore fast::ImagePyramidAccess::getPatch;
%ignore fast::Tensor::create(std::unique_ptr<float[]> data, TensorShape shape);

%nodefaultdtor Config;

// unique_ptr declerations
%unique_ptr(fast::OpenCLImageAccess)
%unique_ptr(fast::ImageAccess)
%unique_ptr(fast::OpenCLBufferAccess)
%unique_ptr(fast::BoundingBoxSetAccess)
%unique_ptr(fast::BoundingBoxSetOpenGLAccess)
%unique_ptr(fast::MeshAccess)
%unique_ptr(fast::VertexBufferObjectAccess)
%unique_ptr(fast::MeshOpenCLAccess)
%unique_ptr(fast::TensorAccess)
%unique_ptr(fast::ImagePyramidAccess)

// Shared_ptr declerations
%shared_ptr(fast::Object)
%shared_ptr(fast::DataChannel)
%shared_ptr(fast::ExecutionDevice)
%shared_ptr(fast::Host)
%shared_ptr(fast::OpenCLDevice)
%shared_ptr(fast::RuntimeMeasurement)
%shared_ptr(fast::RuntimeMeasurementsManager)
%shared_ptr(fast::DataObject)
%shared_ptr(fast::SpatialDataObject)
%shared_ptr(fast::DataChannel)
%shared_ptr(fast::ProcessObject)
@PYFAST_SHARED_PTR_DEFS@

// Interface includes
%include <FAST/Reporter.hpp>
%include <FAST/Object.hpp>
%include <FAST/Data/DataObject.hpp>
%include <FAST/DataChannels/DataChannel.hpp>
%include <FAST/DeviceCriteria.hpp>
%include <FAST/DataChannels/DataChannel.hpp>
%include <FAST/RuntimeMeasurement.hpp>
%include <FAST/RuntimeMeasurementManager.hpp>
%include <FAST/ExecutionDevice.hpp>
%include <FAST/Attribute.hpp>
%include <FAST/ProcessObject.hpp>
%include <FAST/Config.hpp>
%include <FAST/Data/DataTypes.hpp>
%include <FAST/Data/Color.hpp>
%include <FAST/Data/DataObject.hpp>
%include <FAST/Data/SpatialDataObject.hpp>
%include <FAST/Data/SimpleDataObject.hpp>
%include <FAST/Data/Access/OpenCLImageAccess.hpp>
%include <FAST/Data/Access/OpenCLBufferAccess.hpp>
%include <FAST/Data/Access/ImageAccess.hpp>
%include <FAST/Data/Access/BoundingBoxSetAccess.hpp>
%include <FAST/Visualization/Plane.hpp>


%template(updateAndGetOutputImage) fast::ProcessObject::updateAndGetOutputData<fast::Image>;
%template(getNextImage) fast::DataChannel::getNextFrame<fast::Image>;

%template(updateAndGetOutputMesh) fast::ProcessObject::updateAndGetOutputData<fast::Mesh>;
%template(getNextMesh) fast::DataChannel::getNextFrame<fast::Mesh>;

%template(updateAndGetOutputTensor) fast::ProcessObject::updateAndGetOutputData<fast::Tensor>;
%template(getNextTensor) fast::DataChannel::getNextFrame<fast::Tensor>;

@PYFAST_INTERFACE_INCLUDES@

// Extend image for numpy support
%extend fast::Image {
std::size_t _getHostDataPointer() {
    auto access = $self->getImageAccess(ACCESS_READ);
    return (std::size_t)access->get();
}
void* _intToVoidPointer(std::size_t intPointer) {
    return (void*)intPointer;
}
%pythoncode %{
  _data_type_to_str = {
    TYPE_UINT8: 'u1',
    TYPE_INT8: 'i1',
    TYPE_UINT16: 'u2',
    TYPE_INT16: 'i2',
    TYPE_FLOAT: 'f4',
  }
  _str_to_data_type = {value : key for (key, value) in _data_type_to_str.items()}
  @property
  def __array_interface__(self):
    if self.getDimensions() == 2:
        shape = (self.getHeight(), self.getWidth(), self.getNrOfChannels())
    else:
        shape = (self.getDepth(), self.getHeight(), self.getWidth(), self.getNrOfChannels())
    return {
      'shape': shape,
      'data': (self._getHostDataPointer(), False),
      'typestr': self._data_type_to_str[self.getDataType()],
      'version': 3,
      'strides': None,
    }


  def createFromArray(self, ndarray):
    """Create a FAST image from a N-D array (e.g. numpy ndarray)"""
    if not hasattr(ndarray, '__array_interface__'):
      raise ValueError('Input to Image createFromArray() must have the array_interface property')
    array_interface = ndarray.__array_interface__
    shape = array_interface['shape']
    is_2d = True
    has_channels = False
    if len(shape) > 2 and shape[-1] <= 4:
        has_channels = True
    elif len(shape) == 3 and shape[-1] > 4:
        is_2d = False
    elif len(shape) > 3:
        is_2d = False
        has_channels = True
    if is_2d:
        self.create(
            shape[1],
            shape[0],
            self._str_to_data_type[array_interface['typestr'][1:]],
            shape[-1] if has_channels else 1,
                self._intToVoidPointer(array_interface['data'][0])
        )
    else:
        self.create(
            shape[2],
            shape[1],
            shape[0],
            self._str_to_data_type[array_interface['typestr'][1:]],
            shape[-1] if has_channels else 1,
                self._intToVoidPointer(array_interface['data'][0])
        )
%}
}

// Extend Tensor for numpy support
%extend fast::Tensor {
std::size_t _getHostDataPointer() {
    auto access = $self->getAccess(ACCESS_READ);
    return (std::size_t)access->getRawData();
}
float* _intToFloatPointer(std::size_t intPointer) {
    return (float*)intPointer;
}
%pythoncode %{
  @property
  def __array_interface__(self):
    return {
      'shape': self.getShape().getAll(),
      'data': (self._getHostDataPointer(), False),
      'typestr': 'f4',
      'version': 3,
      'strides': None,
    }


  def createFromArray(self, ndarray):
    """Create a FAST Tensor from a N-D array (e.g. numpy ndarray)"""
    if not hasattr(ndarray, '__array_interface__'):
      raise ValueError('Input to Tensor createFromArray() must have the array_interface property')
    array_interface = ndarray.__array_interface__
    # Check data type if it is correct
    if array_interface['typestr'] != 'f4':
      import numpy as np
      # Convert if numpy, else raise error
      if isinstance(ndarray, np.ndarray):
        print('WARNING: ndarray given to fast::Tensor::createFromArray was not 32 bit float and will now be converted.')
        ndarray = ndarray.astype(np.float32)
        array_interface = ndarray.__array_interface__
      else:
        raise ValueError('Array given to Tensor::createFromArray must be 32 bit float, but you sent ' + array_interface['typestr'])
    shape = array_interface['shape']
    fast_shape = TensorShape()
    for i in shape:
        fast_shape.addDimension(i)

    self.create(self._intToFloatPointer(array_interface['data'][0]), fast_shape)
%}
}
