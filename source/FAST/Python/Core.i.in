// Hack for windows and swig
%begin %{
#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
#include <crtdefs.h>
#endif
%}
%define MODULEIMPORT
"
import $module
"
%enddef
%module(moduleimport=MODULEIMPORT) fast_core

%include "Common.i"

// Since python is dynamically typed, lets convert DataObjects to the right type before returning
%pythonappend fast::ProcessObject::runAndGetOutputData(uint, int64_t) %{
    className = val.getNameOfClass()
    val = eval(className + '.fromDataObject')(val)
%}
%pythonappend fast::ProcessObject::getOutputData(uint) %{
    className = val.getNameOfClass()
    val = eval(className + '.fromDataObject')(val)
%}
%pythonappend fast::DataChannel::getNextFrame() %{
    className = val.getNameOfClass()
    val = eval(className + '.fromDataObject')(val)
%}

// Interface includes
%include <FAST/Reporter.hpp>
%include <FAST/Object.hpp>
%include <FAST/Data/DataObject.hpp>
%include <FAST/DataChannels/DataChannel.hpp>
%include <FAST/DeviceCriteria.hpp>
%include <FAST/DataChannels/DataChannel.hpp>
%include <FAST/RuntimeMeasurement.hpp>
%include <FAST/RuntimeMeasurementManager.hpp>
%include <FAST/ExecutionDevice.hpp>
%include <FAST/Attribute.hpp>
%include <FAST/ProcessObject.hpp>
%include <FAST/Config.hpp>
%include <FAST/Data/Access/Access.hpp>
%include <FAST/Data/Color.hpp>
%include <FAST/Data/DataObject.hpp>
%include <FAST/Data/Transform.hpp>
%include <FAST/Data/SpatialDataObject.hpp>
%include <FAST/Data/SimpleDataObject.hpp>
%include <FAST/Data/Access/OpenCLImageAccess.hpp>
%include <FAST/Data/Access/OpenCLBufferAccess.hpp>
%include <FAST/Data/Access/ImageAccess.hpp>
%include <FAST/Data/Access/BoundingBoxSetAccess.hpp>
%include <FAST/Data/Access/OpenGLTextureAccess.hpp>
%include <FAST/Visualization/Plane.hpp>

%shared_ptr(fast::SimpleDataObject<float>)
%shared_ptr(fast::SimpleDataObject<Vector2f>)
%shared_ptr(fast::SimpleDataObject<std::map<std::string, float>>)

%shared_ptr(fast::SimpleDataObject<std::string>)
%shared_ptr(fast::String)
%template(StringT) fast::SimpleDataObject<std::string>;

@PYFAST_INTERFACE_INCLUDES_CORE@

%template(getNextFrame) fast::DataChannel::getNextFrame<fast::DataObject>;

// Include some python code
%pythoncode "@PROJECT_SOURCE_DIR@/source/FAST/Python/DataStream.py"

%extend fast::ProcessObject {
%pythoncode %{
   def getDataStream(self):
       return DataStream(self)
%}
}

/*
%inline {
    PyObject* convertImageToPyObject(PyObject* capsule) {
        std::shared_ptr<fast::Image>* ptr = (std::shared_ptr<fast::Image>*)PyCapsule_GetPointer(capsule, NULL);
        printf("convertImageToPyObject pointer at %p\n", (void*)ptr);
        PyObject* result = SWIG_Python_NewPointerObj(NULL, SWIG_as_voidptr(ptr), SWIGTYPE_p_std__shared_ptrT_fast__Image_t, 0); // <-- seg faults here, why?
        printf("done");
        return result;
    }
}
*/