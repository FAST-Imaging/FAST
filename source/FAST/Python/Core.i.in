// Hack for windows and swig
%begin %{
#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
#include <crtdefs.h>
#endif
%}

%define MODULEIMPORT
"
from typing import *
import $module
"
%enddef
%module(moduleimport=MODULEIMPORT, directors=1) fast
#pragma SWIG nowarn=511

%{

#include <FAST/Object.hpp>
#include <FAST/ProcessObject.hpp>
#include <FAST/Reporter.hpp>
#include <FAST/Visualization/SimpleWindow.hpp>
#include <FAST/Visualization/View.hpp>
#include <FAST/Visualization/Renderer.hpp>
#include <FAST/Data/DataTypes.hpp>
#include <FAST/Data/SimpleDataObject.hpp>
@PYFAST_HEADER_INCLUDES@

using namespace fast;
#undef slots

%}


// General exception handler to avoid crashing python when something in FAST triggers an exception
%exception {
    try {
        $action
    } catch(std::exception &e) {
        PyErr_SetString(PyExc_RuntimeError, e.what());
        SWIG_fail;
    }
}

// Third party stuff
%include <std_pair.i>
%include <std_string.i>
%include <std_shared_ptr.i>
%include <std_vector.i>
%include <std_map.i>
%include <stdint.i>
%include <FAST/Python/std_unique_ptr.i>

// Enable eigen <-> numpy data conversion
%include <FAST/Python/eigen.i>
%eigen_typemaps(Vector2f)
%eigen_typemaps(Vector3f)
%eigen_typemaps(Vector2i)
%eigen_typemaps(Vector3i)
%eigen_typemaps(Vector2ui)
%eigen_typemaps(Vector3ui)
%eigen_typemaps(VectorXf)
%eigen_typemaps(VectorXi)
%eigen_typemaps(VectorXui)
%eigen_typemaps(Matrix3f)
%eigen_typemaps(Matrix4f)


// Define FAST_EXPORT to nothing to avoid compile errors
%define FAST_EXPORT
%enddef
%define Q_OBJECT
%enddef
%define Q_SLOTS
%enddef
%define Q_SIGNALS
public
%enddef

// Enable std::vector and std::map <-> python conversion
%include <FAST/Data/DataTypes.hpp>
%template(vectori) std::vector<int>;
%template(vectorf) std::vector<float>;
%template(vectorui) std::vector<uint>;
%template(vectorc) std::vector<char>;
%template(vectoruc) std::vector<uchar>;
%template(vectors) std::vector<std::string>;
%template(vectorqwidget) std::vector<QWidget*>;
%ignore std::vector<fast::NeuralNetworkNode>::vector(size_type);
%ignore std::vector<fast::NeuralNetworkNode>::resize;
%ignore std::vector<fast::NeuralNetworkNode>::pop;
%template(NeuralNetworkNodes) std::vector<fast::NeuralNetworkNode>;
%template(NeuralNetworkNodeMap) std::map<std::string, fast::NeuralNetworkNode>;
%template(LabelColors) std::map<uint, fast::Color>;
%template(LabelNames) std::map<uint, std::string>;
%template(StringMap) std::map<std::string, std::string>;
%template(StringFloatMap) std::map<std::string, float>;
%template(StringFloatPair) std::pair<std::string, float>;
// This avoids the no default constructor available problem for this vector types:
%ignore std::vector<fast::MeshVertex>::vector(size_type);
%ignore std::vector<fast::MeshVertex>::resize;
%ignore std::vector<fast::MeshVertex>::pop;
%ignore std::vector<fast::MeshLine>::vector(size_type);
%ignore std::vector<fast::MeshLine>::resize;
%ignore std::vector<fast::MeshLine>::pop;
%ignore std::vector<fast::MeshTriangle>::vector(size_type);
%ignore std::vector<fast::MeshTriangle>::resize;
%ignore std::vector<fast::MeshTriangle>::pop;
%template(vectormeshvertex) std::vector<fast::MeshVertex>;
%template(vectormeshline) std::vector<fast::MeshLine>;
%template(vectormeshtriangle) std::vector<fast::MeshTriangle>;
%template(Connections) std::vector<std::vector<fast::MeshLine>>;
%template(Regions) std::vector<fast::Region>;

// FAST CORE LIBRARY

// Ignore statements
%ignore getDevice;
%ignore ReporterEnd::~ReporterEnd();
%ignore QObject;
%ignore MovieStreamerWorker;
%ignore CameraWorker;
%ignore ImagePyramidLevel;
%ignore ImagePyramidPatch;
%ignore fast::ImagePyramidAccess::getPatchData;
%ignore fast::ImagePyramidAccess::getPatch;
%ignore fast::Tensor::create(std::unique_ptr<float[]> data, TensorShape shape);
// Disable GIL on PythonStreamer execute to avoid deadlock between execute and generateStream
%ignore fast::PythonStreamer::execute;
%ignore fast::PythonRandomAccessStreamer::execute;
%ignore fast::PythonRandomAccessStreamer::getPause;
%ignore fast::PythonRandomAccessStreamer::waitForUnpause;
%ignore fast::Streamer::waitForFirstFrame;
%ignore fast::Streamer::startStream;
%ignore fast::Streamer::setMaximumNrOfFrames;

%nodefaultdtor Config;

// unique_ptr declerations
%unique_ptr(fast::OpenCLImageAccess)
%unique_ptr(fast::ImageAccess)
%unique_ptr(fast::OpenCLBufferAccess)
%unique_ptr(fast::BoundingBoxSetAccess)
%unique_ptr(fast::BoundingBoxSetOpenGLAccess)
%unique_ptr(fast::MeshAccess)
%unique_ptr(fast::VertexBufferObjectAccess)
%unique_ptr(fast::MeshOpenCLAccess)
%unique_ptr(fast::TensorAccess)
%unique_ptr(fast::ImagePyramidAccess)
%unique_ptr(fast::OpenGLTextureAccess)

// Shared_ptr declerations
%shared_ptr(fast::Object)
%shared_ptr(fast::AttributeObject)
%shared_ptr(fast::DataChannel)
%shared_ptr(fast::ExecutionDevice)
%shared_ptr(fast::Host)
%shared_ptr(fast::OpenCLDevice)
%shared_ptr(fast::RuntimeMeasurement)
%shared_ptr(fast::RuntimeMeasurementsManager)
%shared_ptr(fast::DataObject)
%shared_ptr(fast::Transform)
%shared_ptr(fast::SpatialDataObject)
%shared_ptr(fast::DataChannel)
%shared_ptr(fast::ProcessObject)
@PYFAST_SHARED_PTR_DEFS@

// These must live here due to the shared_ptr
%template(vectorrenderer) std::vector<std::shared_ptr<fast::Renderer>>;
%template(vectorpo) std::vector<std::shared_ptr<fast::ProcessObject>>;
%template(vectorimage) std::vector<std::shared_ptr<fast::Image>>;
%template(vectortensor) std::vector<std::shared_ptr<fast::Tensor>>;
%template(DataMap) std::map<std::string, std::shared_ptr<fast::DataObject>>;
%template(ProcessObjectMap) std::map<std::string, std::shared_ptr<fast::ProcessObject>>;

// Since python is dynamically typed, lets convert DataObjects to the right type before returning
%pythonappend fast::ProcessObject::runAndGetOutputData(uint, int64_t) %{
    className = val.getNameOfClass()
    val = eval(className + '.fromDataObject')(val)
%}
%pythonappend fast::ProcessObject::getOutputData(uint) %{
    className = val.getNameOfClass()
    val = eval(className + '.fromDataObject')(val)
%}
%pythonappend fast::DataChannel::getNextFrame() %{
    className = val.getNameOfClass()
    val = eval(className + '.fromDataObject')(val)
%}

// Interface includes
%include <FAST/Reporter.hpp>
%include <FAST/Object.hpp>
%include <FAST/Data/DataObject.hpp>
%include <FAST/DataChannels/DataChannel.hpp>
%include <FAST/DeviceCriteria.hpp>
%include <FAST/DataChannels/DataChannel.hpp>
%include <FAST/RuntimeMeasurement.hpp>
%include <FAST/RuntimeMeasurementManager.hpp>
%include <FAST/ExecutionDevice.hpp>
%include <FAST/Attribute.hpp>
%include <FAST/ProcessObject.hpp>
%include <FAST/Config.hpp>
%include <FAST/Data/Access/Access.hpp>
%include <FAST/Data/Color.hpp>
%include <FAST/Data/DataObject.hpp>
%include <FAST/Data/Transform.hpp>
%include <FAST/Data/SpatialDataObject.hpp>
%include <FAST/Data/SimpleDataObject.hpp>
%include <FAST/Data/Access/OpenCLImageAccess.hpp>
%include <FAST/Data/Access/OpenCLBufferAccess.hpp>
%include <FAST/Data/Access/ImageAccess.hpp>
%include <FAST/Data/Access/BoundingBoxSetAccess.hpp>
%include <FAST/Data/Access/OpenGLTextureAccess.hpp>
%include <FAST/Visualization/Plane.hpp>

%shared_ptr(fast::SimpleDataObject<fast::InferenceDataList>)
%shared_ptr(fast::SimpleDataObject<float>)
%shared_ptr(fast::SimpleDataObject<Vector2f>)
%shared_ptr(fast::SimpleDataObject<std::map<std::string, float>>)
%shared_ptr(fast::Batch)
%shared_ptr(fast::Sequence)
%shared_ptr(fast::FloatScalar)
%shared_ptr(fast::FloatPoint)
%template(BatchT) fast::SimpleDataObject<fast::InferenceDataList>;
%template(SequenceT) fast::SimpleDataObject<fast::InferenceDataList>;
%template(FloatScalarT) fast::SimpleDataObject<float>;
%template(FloatPointT) fast::SimpleDataObject<Vector2f>;
%shared_ptr(fast::SimpleDataObject<std::string>)
%shared_ptr(fast::String)
%template(StringT) fast::SimpleDataObject<std::string>;
%template(ClassificationSimpleDataType) fast::SimpleDataObject<std::map<std::string, float>>;
%shared_ptr(fast::SimpleDataObject<std::vector<fast::Region>>)
%shared_ptr(fast::RegionList)
%template(RegionListT) fast::SimpleDataObject<std::vector<fast::Region>>;

@PYFAST_INTERFACE_INCLUDES@

%template(getNextFrame) fast::DataChannel::getNextFrame<fast::DataObject>;


// Extend image for numpy support
%extend fast::Image {
std::size_t _getHostDataPointer() {
    auto access = $self->getImageAccess(ACCESS_READ);
    return (std::size_t)access->get();
}
static void* _intToVoidPointer(std::size_t intPointer) {
    return (void*)intPointer;
}
%pythoncode %{
  _data_type_to_str = {
    TYPE_UINT8: 'u1',
    TYPE_INT8: 'i1',
    TYPE_UINT16: 'u2',
    TYPE_INT16: 'i2',
    TYPE_UINT32: 'u4',
    TYPE_INT32: 'i4',
    TYPE_FLOAT: 'f4',
  }
  _str_to_data_type = {value : key for (key, value) in _data_type_to_str.items()}
  @property
  def __array_interface__(self):
    if self.getDimensions() == 2:
        shape = (self.getHeight(), self.getWidth(), self.getNrOfChannels())
    else:
        shape = (self.getDepth(), self.getHeight(), self.getWidth(), self.getNrOfChannels())
    return {
      'shape': shape,
      'data': (self._getHostDataPointer(), False),
      'typestr': self._data_type_to_str[self.getDataType()],
      'version': 3,
      'strides': None,
    }

  @staticmethod
  def createFromArray(ndarray):
    """Create a FAST image from a N-D array (e.g. numpy ndarray)"""
    import numpy as np
    if not hasattr(ndarray, '__array_interface__'):
        raise ValueError('Input to Image createFromArray() must have the array_interface property')
    # ndarray must be C contiguous
    ndarray = np.ascontiguousarray(ndarray)
    array_interface = ndarray.__array_interface__
    shape = array_interface['shape']
    is_2d = True
    has_channels = False
    if len(shape) == 3 and shape[-1] <= 4:
        has_channels = True
    elif len(shape) == 3 and shape[-1] > 4:
        is_2d = False
    elif len(shape) >= 5:
        raise ValueError('Input to image cannot have shape with more than 4 dimensions')
    elif len(shape) > 3:
        is_2d = False
        has_channels = True
    elif len(shape) < 2:
        raise ValueError('Input to image must have a shape with at least 2 dimensions')
    if is_2d:
        return Image.create(
            shape[1],
            shape[0],
            Image._str_to_data_type[array_interface['typestr'][1:]],
            shape[-1] if has_channels else 1,
            Image._intToVoidPointer(array_interface['data'][0])
        )
    else:
        return Image.create(
            shape[2],
            shape[1],
            shape[0],
            Image._str_to_data_type[array_interface['typestr'][1:]],
            shape[-1] if has_channels else 1,
            Image._intToVoidPointer(array_interface['data'][0])
        )
%}
}

// Extend Tensor for numpy support
%extend fast::Tensor {
std::size_t _getHostDataPointer() {
    auto access = $self->getAccess(ACCESS_READ);
    return (std::size_t)access->getRawData();
}
static float* _intToFloatPointer(std::size_t intPointer) {
    return (float*)intPointer;
}
%pythoncode %{
  @property
  def __array_interface__(self):
    return {
      'shape': self.getShape().getAll(),
      'data': (self._getHostDataPointer(), False),
      'typestr': 'f4',
      'version': 3,
      'strides': None,
    }

  @staticmethod
  def createFromArray(ndarray):
    """Create a FAST Tensor from a N-D array (e.g. numpy ndarray)"""
    import numpy as np
    if not hasattr(ndarray, '__array_interface__'):
        raise ValueError('Input to Tensor createFromArray() must have the array_interface property')

    # Check data type if it is correct
    if ndarray.__array_interface__['typestr'][1:] != 'f4': # Is Float 32 bit?
        print('WARNING: ndarray given to fast::Tensor::createFromArray was not 32 bit float and will now be converted.')
    # Make sure it is C contiguous first
    ndarray = np.ascontiguousarray(ndarray, dtype=np.float32)
    array_interface = ndarray.__array_interface__
    shape = array_interface['shape']
    fast_shape = TensorShape()
    for i in shape:
        fast_shape.addDimension(i)

    return Tensor.create(Tensor._intToFloatPointer(array_interface['data'][0]), fast_shape)
%}
}

// Include some python code
%pythoncode "@PROJECT_SOURCE_DIR@/source/FAST/Python/DataStream.py"

%extend fast::ProcessObject {
%pythoncode %{
   def getDataStream(self):
       return DataStream(self)
%}
}

/*
%inline {
    PyObject* convertImageToPyObject(PyObject* capsule) {
        std::shared_ptr<fast::Image>* ptr = (std::shared_ptr<fast::Image>*)PyCapsule_GetPointer(capsule, NULL);
        printf("convertImageToPyObject pointer at %p\n", (void*)ptr);
        PyObject* result = SWIG_Python_NewPointerObj(NULL, SWIG_as_voidptr(ptr), SWIGTYPE_p_std__shared_ptrT_fast__Image_t, 0); // <-- seg faults here, why?
        printf("done");
        return result;
    }
}
*/

%include "ProcessObjects.i"