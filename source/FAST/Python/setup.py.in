# coding=utf-8
from setuptools import setup, Extension
import os.path
import sys

def get_all_filenames(path):
    files = []
    for root, dirs, filenames in os.walk(path):
       for name in filenames:
          files.append(os.path.join(root[5:], name))
          #print(os.path.join(root[5:],name))
    return files

def get_all_linux_depedencies(path, libraries):
    """
    Because setup can't handle symlinks, we need to handle shared object (.so)
    dependencies; only include one to avoid duplicates.
    """
    import pathlib
    import lddwrap

    result = []
    libraries_in_path = os.listdir(path)
    for library in libraries:
        if not os.path.exists(os.path.join(path, library)): continue
        if not library.startswith('libFAST.so'):
            result.append(os.path.join(path[5:], library))
        deps = lddwrap.list_dependencies(path=pathlib.Path(os.path.join(path, library)))
        for dep in deps:
            if dep.soname is None: continue
            if dep.soname in libraries_in_path or dep.soname.startswith('libFAST.so'):
                result.append(os.path.join(path[5:], dep.soname))
    return result



is_windows = sys.platform.startswith('win')
if is_windows:
    compile_args = ['/bigobj', '/nologo', '/MD', '/EHsc', '-DNOMINMAX', '-DNOGDI']
    link_args = []
    package_data = {'': [
            'bin/*.dll',
            'bin/plugins.xml',
            'bin/fast_configuration.txt',
            'README.md',
            'pipelines/**/*',
            ] + get_all_filenames('fast/licenses/')
            + get_all_filenames('fast/kernels/')
            + get_all_filenames('fast/plugins/')
            + get_all_filenames('fast/doc/')
          }
else:
    compile_args = []
    link_args = ['-Wl,-rpath=$ORIGIN/../lib']
    package_data = {'': [
            'lib/plugins.xml',
            'bin/fast_configuration.txt',
            'README.md',
            'pipelines/**/*',
            ] + get_all_filenames('fast/licenses/')
            + get_all_filenames('fast/kernels/')
            + get_all_filenames('fast/plugins/')
            + get_all_filenames('fast/doc/')
            + get_all_linux_depedencies('fast/lib/', [
                'libFAST.so', 
                'libQt5XcbQpa.so.5', 
                'libQt5MultimediaGstTools.so.5', 
                'libInferenceEngineOpenVINO.so',
                'libclDNNPlugin.so',
                'libMKLDNNPlugin.so',
                'libmyriadPlugin.so',
                'libInferenceEngineTensorRT.so',
                # Removed to reduce pip package size
                #'libInferenceEngineTensorFlowCPU.so',
                #'libInferenceEngineTensorFlowCUDA.so',
                #'libInferenceEngineTensorFlowROCm.so',
            ])
          }

_fast = Extension('fast.bin._fast',
                include_dirs=[
                    '.',
                    '..',
                    '@FAST_BINARY_DIR@/include/',
                    '@FAST_BINARY_DIR@/include/eigen3/',
                    '@FAST_BINARY_DIR@/include/QWidgets/',
                    '@FAST_BINARY_DIR@/include/QtCore',
                    '@FAST_BINARY_DIR@/include/QtWidgets',
                    '@FAST_BINARY_DIR@/include/QtOpenGL',
                    '@FAST_BINARY_DIR@/include/QtPrintSupport',
                    '@FAST_BINARY_DIR@/include/QtGui',
                    '@FAST_SOURCE_DIR@/source/',
                    '@NUMPY_INCLUDE_DIR@',
                ],
                library_dirs=['@FAST_BINARY_DIR@/lib/', os.path.dirname('@OpenCL_LIBRARIES@')],
                sources=['fast/PyFASTPYTHON_wrap.cxx'],
                libraries=[ # Libraries to link with
                        'FAST',
                        'Qt5Core',
                	'Qt5Widgets',
                	'Qt5Gui',
                	'Qt5OpenGL',
                	'Qt5Multimedia',
                	'Qt5MultimediaWidgets',
                        'Qt5PrintSupport',
                        'Qt5Network',
                	'OpenCL',
                	'@OPENGL_LIBRARIES@',
                ],
                extra_compile_args=compile_args,
                extra_link_args=link_args,
            )

# Get long description from README
with open("@FAST_SOURCE_DIR@/README.md", "r", encoding='utf-8') as fh:
    long_description = fh.read()

version = '@FAST_VERSION@'
for v in sys.argv: # override version if present
    if v.startswith('version='):
        version = v[len('version='):]
        sys.argv.remove(v) # Remove or setup will be cranky
        break

setup(name='pyFAST',    # Distribution name
      version=version,
      description='Python bindings of FAST - a framework for high performance medical image computing and visualization on heterogeneous systems utilizing multi-core CPUs and GPUs.',
      long_description=long_description,
      long_description_content_type="text/markdown",
      author='Erik Smistad',
      author_email='ersmistad@gmail.com',
      url='https://github.com/smistad/FAST',
      license='BSD 2-clause (package include binary dependencies with other licences, see README)',
      packages=['fast'],    # Package name
      setup_requires=['wheel'],
      ext_modules=[_fast],
      package_data=package_data,
      classifiers=[
        'Development Status :: 4 - Beta',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX :: Linux',
        'Programming Language :: C++',
        'Programming Language :: Python :: 3 :: Only',
        'Environment :: GPU',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
        'Topic :: Scientific/Engineering :: Image Processing',
        'Topic :: Scientific/Engineering :: Medical Science Apps.',
        'Topic :: Scientific/Engineering :: Visualization',
      ],
      install_requires=['numpy'],
      python_requires='>=3'
)
