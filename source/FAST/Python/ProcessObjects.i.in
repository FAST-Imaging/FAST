// Python process object functionality using directors feature

%feature("director") PythonProcessObject;
%shared_ptr(fast::PythonProcessObject)
%feature("director") PythonStreamer;
%shared_ptr(fast::PythonStreamer)
%feature("director") PythonRandomAccessStreamer;
%shared_ptr(fast::PythonRandomAccessStreamer)


%inline %{

    namespace fast {
        class PythonProcessObject : public ProcessObject {
            public:
            virtual void execute() = 0;
            std::string getNameOfClass() const {
                return "PythonProcessObject";
            }
            virtual ~PythonProcessObject() { };
            std::shared_ptr<PythonProcessObject> m_hack;
            PythonProcessObject() {
                // A hack to make this work as PythonProcessObject does not return a smart pointer in create as other POs.
                // Use a custom deleter which doesn't delete to avoid double delete
                m_hack.reset(this, [](PythonProcessObject* obj) {});
                mPtr = m_hack;
            }

            void setInputConnection(DataChannel::pointer port) {
                ProcessObject::setInputConnection(0, port);
            }

            void setInputConnection(uint portID, DataChannel::pointer port) {
                ProcessObject::setInputConnection(portID, port);
            }

            void setInputData(DataObject::pointer data) {
                ProcessObject::setInputData(0, data);
            }

            void setInputData(uint portID, DataObject::pointer data) {
                ProcessObject::setInputData(portID, data);
            }

            DataChannel::pointer getOutputPort(uint portID = 0) {
                return ProcessObject::getOutputPort(portID);
            }

            void addOutputData(int port, std::shared_ptr<DataObject> image) {
                ProcessObject::addOutputData(port, image);
            }

            DataObject::pointer _getInputData(int port = 0) {
                auto data = ProcessObject::getInputData<DataObject>(port);
                return data;
            }

            void createInputPort(int port) {
                ProcessObject::createInputPort<DataObject>(port);
            }
            void createOutputPort(int port) {
                ProcessObject::createOutputPort<DataObject>(port);
            }

            virtual void stopPipeline() override {
                ProcessObject::stopPipeline();
            }

        }; // end class python process object

        class PythonStreamer : public Streamer {
            public:
            virtual void generateStream() = 0;
            std::string getNameOfClass() const override {
                return "PythonStreamer";
            }
            void execute() {
                startStream();
                waitForFirstFrame();
            }
            virtual ~PythonStreamer() { };
            std::shared_ptr<PythonStreamer> m_hack;
            PythonStreamer() {
                // A hack to make this work as PythonStreamer does not return a smart pointer thread New as other POs.
                // Use a custom deleter which doesn't delete to avoid double delete
                m_hack.reset(this, [](PythonStreamer* obj) {});
                mPtr = m_hack;
                setModified(true);
            }

            bool isStopped() {
                return Streamer::isStopped();
            }

            void stop() {
                Streamer::stop();
            }

            void addOutputData(int port, std::shared_ptr<DataObject> image) {
                ProcessObject::addOutputData(port, image);
            }

            DataObject::pointer _getInputData(int port = 0) {
                auto data = ProcessObject::getInputData<DataObject>(port);
                return data;
            }

            DataChannel::pointer getOutputPort(uint portID = 0) {
                return ProcessObject::getOutputPort(portID);
            }

            void createInputPort(int port) {
                ProcessObject::createInputPort<DataObject>(port);
            }
            void createOutputPort(int port) {
                ProcessObject::createOutputPort<DataObject>(port);
            }
            void frameAdded() {
                Streamer::frameAdded();
            }
            virtual void stopPipeline() override {
                Streamer::stopPipeline();
            }
        }; // end class python streamer


        class PythonRandomAccessStreamer : public RandomAccessStreamer {
            public:
            virtual void generateStream() = 0;
            virtual int getNrOfFrames() = 0;
            std::string getNameOfClass() const {
                return "PythonRandomAccessStreamer";
            }
            void execute() {
                startStream();
                waitForFirstFrame();
            }
            virtual ~PythonRandomAccessStreamer() { };
            std::shared_ptr<PythonRandomAccessStreamer> m_hack;
            PythonRandomAccessStreamer() {
                // A hack to make this work as PythonRandomAccessStreamer does not return a smart pointer thread New as other POs.
                // Use a custom deleter which doesn't delete to avoid double delete
                m_hack.reset(this, [](PythonRandomAccessStreamer* obj) {});
                mPtr = m_hack;
                setModified(true);
            }

            bool isStopped() {
                return RandomAccessStreamer::isStopped();
            }

            void stop() {
                RandomAccessStreamer::stop();
            }

            void addOutputData(int port, std::shared_ptr<DataObject> image) {
                ProcessObject::addOutputData(port, image);
            }

            DataObject::pointer _getInputData(int port = 0) {
                auto data = ProcessObject::getInputData<DataObject>(port);
                return data;
            }

            DataChannel::pointer getOutputPort(uint portID = 0) {
                return ProcessObject::getOutputPort(portID);
            }

            void createInputPort(int port) {
                ProcessObject::createInputPort<DataObject>(port);
            }
            void createOutputPort(int port) {
                ProcessObject::createOutputPort<DataObject>(port);
            }
            void frameAdded() {
                RandomAccessStreamer::frameAdded();
            }
            int getCurrentFrameIndex() {
                return RandomAccessStreamer::getCurrentFrameIndex();
            }
            int getCurrentFrameIndexAndUpdate() {
                return RandomAccessStreamer::getCurrentFrameIndexAndUpdate();
            }
            bool getPause() {
                return RandomAccessStreamer::getPause();
            }
            void setPause(bool pause) {
                RandomAccessStreamer::setPause(pause);
            }
            void waitForUnpause() {
                return RandomAccessStreamer::waitForUnpause();
            }
            bool getLooping() {
                return RandomAccessStreamer::getLooping();
            }
            void setLooping(bool loop) {
                RandomAccessStreamer::setLooping(loop);
            }
            void setCurrentFrameIndex(int i) {
                RandomAccessStreamer::setCurrentFrameIndex(i);
            }
            int getFramerate() {
                return RandomAccessStreamer::getFramerate();
            }
            void setFramerate(int framerate) {
                RandomAccessStreamer::setFramerate(framerate);
            }
            virtual void stopPipeline() override {
                RandomAccessStreamer::stopPipeline();
            }
        }; // end class python random access streamer
    } // end namespace
    %}

    // Extend PythonProcessObject with some Python code
    %extend fast::PythonProcessObject {
    %pythoncode "@PROJECT_SOURCE_DIR@/source/FAST/Python/ProcessObjectExtensions.py"
}
// Extend PythonStreamer with some Python code
%extend fast::PythonStreamer {
    %pythoncode "@PROJECT_SOURCE_DIR@/source/FAST/Python/ProcessObjectExtensions.py"
}
// Extend PythonRandomAccessStreamer with some Python code
%extend fast::PythonRandomAccessStreamer {
    %pythoncode "@PROJECT_SOURCE_DIR@/source/FAST/Python/ProcessObjectExtensions.py"
}

// Get proper error messages if python error occurs in PythonProcessObject director
// This was taken from https://github.com/swig/swig/issues/1117
%feature("director:except") {
    if($error != NULL) {
        PyObject *exc, *val, *tb;
        PyErr_Fetch(&exc, &val, &tb);
        PyErr_NormalizeException(&exc, &val, &tb);
        std::string err_msg("In method '$symname': ");

        PyObject* exc_str = PyObject_GetAttrString(exc, "__name__");
        err_msg += SWIG_Python_str_AsChar(exc_str);
        Py_XDECREF(exc_str);

        if(val != NULL) {
            PyObject* val_str = PyObject_Str(val);
            err_msg += ": ";
            err_msg += SWIG_Python_str_AsChar(val_str);
            Py_XDECREF(val_str);
        }

        Py_XDECREF(exc);
        Py_XDECREF(val);
        Py_XDECREF(tb);

        Swig::DirectorMethodException::raise(err_msg.c_str());
    }
}
